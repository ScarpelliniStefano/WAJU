{"remainingRequest":"C:\\Users\\stefa\\Desktop\\VueJS\\jcoui_web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\stefa\\Desktop\\VueJS\\jcoui_web\\src\\components\\LinedVTextarea.vue?vue&type=style&index=0&id=8881da20&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\stefa\\Desktop\\VueJS\\jcoui_web\\src\\components\\LinedVTextarea.vue","mtime":1635151695411},{"path":"C:\\Users\\stefa\\Desktop\\VueJS\\jcoui_web\\node_modules\\css-loader\\dist\\cjs.js","mtime":1634653953725},{"path":"C:\\Users\\stefa\\Desktop\\VueJS\\jcoui_web\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1634653954442},{"path":"C:\\Users\\stefa\\Desktop\\VueJS\\jcoui_web\\node_modules\\postcss-loader\\src\\index.js","mtime":1634653954025},{"path":"C:\\Users\\stefa\\Desktop\\VueJS\\jcoui_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1634653953403},{"path":"C:\\Users\\stefa\\Desktop\\VueJS\\jcoui_web\\node_modules\\vue-loader\\lib\\index.js","mtime":1634653954200}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5saW5lZC10ZXh0YXJlYSB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGZvbnQtc2l6ZTogMTNweDsNCiAgbGluZS1oZWlnaHQ6IDE1MCU7DQogIGZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIG1vbm9zcGFjZTsNCn0NCg0KLmxpbmVkLXRleHRhcmVhX19saW5lcyB7DQogIGJhY2tncm91bmQtY29sb3I6ICNGMEYwRjA7DQogIGJvcmRlcjogMXB4IHNvbGlkICNEN0UyRUQ7DQogIGJvcmRlci1yYWRpdXM6IDEwcHggMCAwIDEwcHg7DQogIGJvcmRlci1yaWdodC13aWR0aDogMDsNCiAgcGFkZGluZzogMTVweCAxMHB4IDE1cHggMTVweDsNCiAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KDQoubGluZWQtdGV4dGFyZWFfX2xpbmVzX19pbm5lciB7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCn0NCg0KLmxpbmVkLXRleHRhcmVhX19saW5lc19fbGluZSB7DQogIHRleHQtYWxpZ246IHJpZ2h0Ow0KfQ0KDQoubGluZWQtdGV4dGFyZWFfX2xpbmVzX19saW5lLS1pbnZhbGlkIHsNCiAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogIGNvbG9yOiByZWQ7DQp9DQoubGluZWQtdGV4dGFyZWFfX2NvbnRlbnQgew0KICBib3JkZXI6IDFweCBzb2xpZCAjRDdFMkVEOw0KICBib3JkZXItcmFkaXVzOiAwIDEwcHggMTBweCAwOw0KICBib3JkZXItbGVmdC13aWR0aDogMDsNCiAgbWFyZ2luOiAwOw0KICBsaW5lLWhlaWdodDogaW5oZXJpdDsNCiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTsNCiAgcGFkZGluZzogMTVweDsNCiAgd2lkdGg6IDEwMCU7DQogIG92ZXJmbG93OiBhdXRvOw0KfQ0KDQoubGluZWQtdGV4dGFyZWFfX2NvbnRlbnQtLXdyYXAgew0KICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7DQp9DQoNCi5saW5lZC10ZXh0YXJlYV9fY29udGVudC0tbm93cmFwIHsNCiAgd2hpdGUtc3BhY2U6IHByZTsNCn0NCg0KQHN1cHBvcnRzICgtbXMtaW1lLWFsaWduOmF1dG8pIHsNCiAgLmxpbmVkLXRleHRhcmVhX19jb250ZW50LS1ub3dyYXAgew0KICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsNCiAgfQ0KfQ0KDQoubGluZWQtdGV4dGFyZWFfX2NvbnRlbnQtLWRpc2FibGVkIHsNCiAgYm9yZGVyLXJhZGl1czogMTBweDsNCiAgYm9yZGVyLWxlZnQtd2lkdGg6IDFweDsNCn0NCg0KLmxpbmVkLXRleHRhcmVhX19jb250ZW50OmZvY3VzIHsNCiAgb3V0bGluZTogbm9uZTsNCn0NCg0KLmNvdW50LWhlbHBlciB7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgdmlzaWJpbGl0eTogaGlkZGVuOw0KICBoZWlnaHQ6IGF1dG87DQogIHdpZHRoOiBhdXRvOw0KfQ0K"},{"version":3,"sources":["LinedVTextarea.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqNA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"LinedVTextarea.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"lined-textarea\">\r\n    <div class=\"lined-textarea__lines\"\r\n      v-if=\"!disabled\"\r\n      :style=\"{ 'padding-right': `${longestWidth}px` }\"\r\n    >\r\n      <div class=\"lined-textarea__lines__inner\"\r\n        ref=\"lines\"\r\n      >\r\n        <p v-for=\"(line, index) in lines\"\r\n          :key=\"index\"\r\n          class=\"lined-textarea__lines__line\"\r\n          :class=\"{ 'lined-textarea__lines__line--invalid': invalidLines.includes(line) }\"\r\n          v-html=\"line\"\r\n        ></p>\r\n      </div>\r\n    </div>\r\n    <textarea :disabled=\"disabled\"\r\n      :placeholder=\"placeholder\"\r\n      class=\"lined-textarea__content\"\r\n      :class=\"{ 'lined-textarea__content--disabled': disabled,\r\n              'lined-textarea__content--wrap': !nowrap,\r\n              'lined-textarea__content--nowrap': nowrap }\"\r\n      v-model=\"content\"\r\n      v-on:scroll=\"scrollLines\"\r\n      v-on:input=\"onInput\"\r\n      v-on:mousedown=\"detectResize\"\r\n      :style=\"styles\"\r\n      ref=\"textarea\"\r\n    ></textarea>\r\n    <div class=\"count-helper\" ref=\"helper\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'LinedVTextarea',\r\n  mounted () {\r\n    this.content = this.value\r\n    this.syncScroll()\r\n    this.calculateCharactersPerLine()\r\n  },\r\n  data () {\r\n    return {\r\n      content: '',\r\n      widthPerChar: 8, // Hard coded, ajust when necessary\r\n      numPerLine: 1,\r\n      previousWidth: 0,\r\n      scrolledLength: 0\r\n    }\r\n  },\r\n  props: {\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    nowrap: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    placeholder: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    styles: {\r\n      type: Object,\r\n      default () {\r\n        return {\r\n          height: '300px'\r\n        }\r\n      }\r\n    },\r\n    value: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    validate: {\r\n      type: Function,\r\n      default: () => true\r\n    }\r\n  },\r\n  computed: {\r\n    invalidLines () {\r\n      const lineNumbers = []\r\n      this.content.split('\\n').forEach((line, index) => {\r\n        if (!this.validate(line)) lineNumbers.push(index + 1)\r\n      })\r\n      return lineNumbers\r\n    },\r\n    lines () {\r\n      if (this.content === '') return [1]\r\n      const lineNumbers = []\r\n      let num = 1\r\n      // Number of lines extended. Seems to work with pre-wrap (has problem with dash)\r\n      function getWrapTimes (sentence, width) {\r\n        if (width <= 0) {\r\n          // Protect against infinite loop\r\n          console.warn('Please set the min-width of textarea to allow at least one character per line.')\r\n          return sentence.length + 1 // Seems browser would add one additional space\r\n        }\r\n        const words = sentence.split(' ')\r\n        let currentLine = 1\r\n        let spaceLeft = width\r\n        words.forEach((word) => {\r\n          let isWidth = spaceLeft === width\r\n          /* eslint-disable no-unmodified-loop-condition */\r\n          while (isWidth && word.length >= spaceLeft) {\r\n            ++currentLine\r\n            word = word.slice(width)\r\n          }\r\n          if (spaceLeft === width) {\r\n            spaceLeft -= word.length\r\n            return\r\n          }\r\n          if (word.length + 1 > spaceLeft) {\r\n            ++currentLine\r\n            spaceLeft = width\r\n          }\r\n          spaceLeft -= isWidth ? word.length : word.length + 1\r\n        })\r\n        return (spaceLeft === width) ? currentLine - 1 : currentLine\r\n      }\r\n      this.content.split('\\n').forEach((line) => {\r\n        const wrapTimes = getWrapTimes(line, this.numPerLine) - 1\r\n        lineNumbers.push(num)\r\n        for (let i = 0; i < wrapTimes; ++i) lineNumbers.push('&nbsp;')\r\n        ++num\r\n      })\r\n      return lineNumbers\r\n    },\r\n    longestWidth () {\r\n      for (let i = this.lines.length - 1; i >= 0; --i) {\r\n        /* eslint-disable security/detect-object-injection */\r\n        if (this.lines[i] === '&nbsp;') continue\r\n        return (this.lines[i] + '').length * this.widthPerChar + 10 // 10px base padding-right\r\n        /* eslint-enable security/detect-object-injection */\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    // When left area grows/shrinks e.g. 9 => 10; 100 => 99\r\n    longestWidth (val, oldVal) {\r\n      if (val !== oldVal) this.$nextTick(() => this.calculateCharactersPerLine())\r\n    },\r\n    nowrap () {\r\n      this.calculateCharactersPerLine()\r\n    },\r\n    value (val) {\r\n      if (val !== this.content) this.content = val\r\n    }\r\n  },\r\n  methods: {\r\n    calculateCharactersPerLine () { // May be +-1 off real value >_<\r\n      if (this.nowrap) {\r\n        this.numPerLine = Number.MAX_SAFE_INTEGER\r\n        return\r\n      }\r\n      const textarea = this.$refs.textarea\r\n      const styles = getComputedStyle(textarea)\r\n      const paddingLeft = parseFloat(styles.getPropertyValue('padding-left'))\r\n      const paddingRight = parseFloat(styles.getPropertyValue('padding-right'))\r\n      const fontSize = styles.getPropertyValue('font-size')\r\n      const fontFamily = styles.getPropertyValue('font-family')\r\n      const width = textarea.clientWidth - paddingLeft - paddingRight\r\n      const helper = this.$refs.helper\r\n      helper.style.fontSize = fontSize\r\n      helper.style.fontFamily = fontFamily\r\n      helper.innerHTML = ''\r\n      for (let num = 1; num < 999; ++num) {\r\n        helper.innerHTML += 'a'\r\n        if (helper.getBoundingClientRect().width > width) {\r\n          this.numPerLine = num - 1\r\n          break\r\n        }\r\n      }\r\n    },\r\n    detectResize () {\r\n      const textarea = this.$refs.textarea\r\n      const { clientWidth: w1, clientHeight: h1 } = textarea\r\n      const detect = () => {\r\n        const { clientWidth: w2, clientHeight: h2 } = textarea\r\n        if (w1 !== w2 || h1 !== h2) this.calculateCharactersPerLine()\r\n      }\r\n      const stop = () => {\r\n        this.calculateCharactersPerLine()\r\n        document.removeEventListener('mousemove', detect)\r\n        document.removeEventListener('mouseup', stop)\r\n      }\r\n      document.addEventListener('mousemove', detect)\r\n      document.addEventListener('mouseup', stop)\r\n    },\r\n    onInput () {\r\n      this.$emit('input', this.content)\r\n      this.recalculate()\r\n    },\r\n    recalculate () {\r\n      const textarea = this.$refs.textarea\r\n      const width = textarea.clientWidth\r\n      if (width !== this.previousWidth) this.calculateCharactersPerLine()\r\n      this.previousWidth = width\r\n    },\r\n    scrollLines (e) {\r\n      this.scrolledLength = e.target.scrollTop\r\n      this.syncScroll()\r\n    },\r\n    syncScroll () {\r\n      this.$refs.lines.style.transform = `translateY(${-this.scrolledLength}px)`\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.lined-textarea {\r\n  display: flex;\r\n  font-size: 13px;\r\n  line-height: 150%;\r\n  font-family: Helvetica, monospace;\r\n}\r\n\r\n.lined-textarea__lines {\r\n  background-color: #F0F0F0;\r\n  border: 1px solid #D7E2ED;\r\n  border-radius: 10px 0 0 10px;\r\n  border-right-width: 0;\r\n  padding: 15px 10px 15px 15px;\r\n  overflow: hidden;\r\n  position: relative;\r\n}\r\n\r\n.lined-textarea__lines__inner {\r\n  position: absolute;\r\n}\r\n\r\n.lined-textarea__lines__line {\r\n  text-align: right;\r\n}\r\n\r\n.lined-textarea__lines__line--invalid {\r\n  font-weight: bold;\r\n  color: red;\r\n}\r\n.lined-textarea__content {\r\n  border: 1px solid #D7E2ED;\r\n  border-radius: 0 10px 10px 0;\r\n  border-left-width: 0;\r\n  margin: 0;\r\n  line-height: inherit;\r\n  font-family: monospace;\r\n  padding: 15px;\r\n  width: 100%;\r\n  overflow: auto;\r\n}\r\n\r\n.lined-textarea__content--wrap {\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.lined-textarea__content--nowrap {\r\n  white-space: pre;\r\n}\r\n\r\n@supports (-ms-ime-align:auto) {\r\n  .lined-textarea__content--nowrap {\r\n      white-space: nowrap;\r\n  }\r\n}\r\n\r\n.lined-textarea__content--disabled {\r\n  border-radius: 10px;\r\n  border-left-width: 1px;\r\n}\r\n\r\n.lined-textarea__content:focus {\r\n  outline: none;\r\n}\r\n\r\n.count-helper {\r\n  position: absolute;\r\n  visibility: hidden;\r\n  height: auto;\r\n  width: auto;\r\n}\r\n</style>"]}]}